// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
//%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module  = MODULE ID LCURLY Imports Declarations RCURLY
	    ;
Imports = Import Imports
		|
		;
Import  = IMPORT ID SEMICOLON
		;
		

Declarations = Declaration Declarations
			 | 
			 ;
			 
Declaration = Function_Declaration
			| Field_Declaration
			| Type_Declaration
			;
						
Function_Declaration = Accessibility Type_Name ID  LPAREN Parameters RPAREN LCURLY Statements RCURLY
					;

Field_Declaration = Accessibility Type_Name ID SEMICOLON
					;

Type_Declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON
					;
					
Accessibility = PUBLIC
		  |
		  ;
		  
		  

Type_Name = Primitive
		  | Array
		  | ID
		  ;
		  
Primitive = VOID
		  | BOOLEAN
		  | INT
		  ;
		  
Array = Primitive LBRACKET RBRACKET
	  | Array LBRACKET RBRACKET
	  | ID LBRACKET RBRACKET
	  ;




Parameters = Parameter COMMA Parameters
|Parameter
|
;

		
Parameter = Type_Name ID
			;

Statements = Statement Statements
			| 
			;

Statement = Type_Name ID SEMICOLON
			| LCURLY Statements RCURLY
			| IF_Statement
			| WHILE LPAREN Expression RPAREN Statement
			| BREAK SEMICOLON
			| Return_Statement
			| Expression SEMICOLON
			;

IF_Statement = IF LPAREN Expression RPAREN Statement 
			   |IF LPAREN Expression RPAREN Statement ELSE Statement
			   ;
			   
Return_Statement = RETURN SEMICOLON
				 | RETURN Expression SEMICOLON
				;


	  
	  
Expression = Assignment
		   | Right_Expression
		   ;
Assignment = Left_Expression EQL Expression
		   ;
		   
		   
Left_Expression = ID Index_Part
;
Index_Part = LBRACKET Expression RBRACKET Index_Part
|
;


			    
			    
Right_Expression = Arith_Expression
				 | Arith_Expression Comparison Arith_Expression
				 ;
				 
Comparison = EQEQ
		   | NEQ
		   | LT
		   | LEQ
		   | GT
		   | GEQ
		   ; 
		   
Arith_Expression = Arith_Expression Additive Term
				 | Term
				 ;
Additive = PLUS
		 | MINUS
		 ;
		 
Term = Term Multiplicative Factor
	 | Factor
	 ;
	 
Multiplicative = TIMES
			   | DIV
			   | MOD
			   ;
Factor = MINUS Factor
	   | Primary_Expression
	   ;
Primary_Expression = Left_Expression
				   | Function_Call
				   | Array_Expression
				   | STRING_LITERAL
				   | INT_LITERAL
				   | Boolean
				   | Paren_Expression
				   ;
Boolean = TRUE
		| FALSE
		;
Array_Expression = LBRACKET Expressions RBRACKET
				 ;
Paren_Expression = LPAREN Expression RPAREN
				 ; 
Function_Call = ID LPAREN Empty_Expressions RPAREN
			  ;
Expressions = Expressions COMMA Expression
		    | Expression
		    ;
Empty_Expressions = Expressions
				  |
				  ;





/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
/*Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;*/