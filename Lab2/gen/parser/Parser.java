package parser;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RCURLY = 9;
		static public final short RPAREN = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short INT = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short IF = 16;
		static public final short RBRACKET = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9orLbbq55KGlJqpISX8Y2Ca48o0WDbCGemXP24G20c221WNN450KSG51L541HSYvtZG3p$" +
		"zz4i#FCS5HHGNG8Iu8a9SK50s9Img6BP8UVjDpQGpqpq9HvqvzrNLgrlLRwrkmDS7mt0DRi" +
		"POJCCDk14toI$muG4yY0Mu44cOWwSn44DnRpnFNelmv3HvVYyUdkh4Ez#TXySwU7WcmNF$G" +
		"46K5o1lkGVlTnH5UIcO8wAyHbHW72QZ6haenmZqGpuAaOa1o46VXDw#2RtP7juXnklkkpk1" +
		"xvuOt$N6jnWDCUkMfhDCbZFeWIjn6O8u3pqn75TWGXmxNLwFondBQKIzyTVW0in7RrphmeX" +
		"akDXawB1BFJ9srrzb$3FY6EvZ78tfw6MlbXn52UTx6sPY5cRZTjpHPGRlCLpbEaPl$YrTpE" +
		"ckc3MwpzXfUDZiSoeok6#BCKhtRGgcuchQItHVHoA4B2oKVMg7eyQO#S$0uwWpcecIDx08r" +
		"yb#hiQZc2HxS17wOn0cOJ3NwI5SWZoCvxaeuxCkHJ4kHotjMap4hRWJbPYBH$04xiTIDF4K" +
		"BSEJc0VWMTY$vR1O5$oySKb8vdtgmN4FCEDDumvKybPNyxJqvWsAvpL4UQdaMPwyVfruVWz" +
		"UkeENwBcs7U7r8gzlDtZsSw6y7Dx6FAvr0TUgaBMac1McXEjIodKh#z#y$vNFYfjdkSwoYh" +
		"CSoHCGuksfvJcoMVKkgn9qoTcPq#4FSbTwCQSt8voX#ncxvm#uxgPRH9QkLjW$Y7LhC2lpK" +
		"Dw9hZASwnZ$xPnYxN8TUNZVB5QEyBxrvtijctQDxciTQu$5IX1KEnmLpXPW9GXhuQWWeq9i" +
		"xR5aC6ygzyzFBSXrog2UpYhX8qQGPVyhg5VG6oGhqyHPv6Io3N4UwHZ8jskwyCTR1gnOneP" +
		"6AyKGOYenWSWYvX8BYI9YfysB0B3MisaZXbDl9WA4psI5jIRCuSs4jPVOIkpMlbpg#nnv3X" +
		"CXubSQrTgtt#4$e77Jg1zKdPNEQbN$B3OjgXyYsbJFT#GuGbIgta1C9Bud6ebNYNdgMz1vZ" +
		"eWypuu$ePoTn1BLjpZvslSSqHBRx$2$I9pqydVc#cp#oyGPAbCeZrBErZmsJdayOnUR7PeZ" +
		"IVj#8quxSYVJFaQPGddM4Tkk$bJ2YlHpMriS#dQALOwO9fSnb3hq5pfqD3hqcV5ncE$ITrp" +
		"bKhVv9eAUqtQ7lL5bpnXUjigLRFPGRY3iixs9MAs#jJ4npJgkLsBwfwlSx3ANRLsCTz4vpg" +
		"z9ywvK#PBsFzz5tAf4VkyuX5pwLa1$yhVyQIHREIKdvGHYVj8MrNusxMxP5UtvYVXHUCFa1" +
		"sEtclQWi7u8pwzibQ$Pxf3jiexo6$cAxPV4Pc8ZyO6yB#l8scRYtZFjc$A9h9UFv4FPOEnt" +
		"PRMibNTaZRnjxBTaatmiNyZdyfbyAiso9JeQLWZvpcZVIeiSaSDoo5YiLBBNQ0VahoZxk1p" +
		"ZxCyQlPtDP7v99VERnqUmih4MLr6lecw$5o8OpMfUoue$XjnoskNq5rD6CCo14kQ8O9o1PT" +
		"uYOnbJmznb1k0tXbzX4Kc4JtKVlpwIY1H#W$W97zzQba4XxLpp5WdO5Tsy#OhOLqVfXWBw2" +
		"ipxBOnyslcK5GxaC5yEPPv1WF2hxeJVV8cCqk#QUZvx$3$x11ba");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			new Action() {	// [23] NonEmptyParameterList = NonEmptyParameterList COMMA Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [24] NonEmptyParameterList = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [25] ParameterList = NonEmptyParameterList
			Action.NONE,  	// [26] ParameterList = 
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [28] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [29] StatementList = 
			RETURN3,	// [30] Statement = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [31] Statement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			Action.RETURN,	// [32] Statement = IfStatement
			RETURN5,	// [33] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [34] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [35] Statement = ReturnStatement
			RETURN2,	// [36] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN5,	// [37] IfStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [38] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN3,	// [39] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [40] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [41] Expression = Assignment
			Action.RETURN,	// [42] Expression = RhsExpression
			RETURN3,	// [43] Assignment = LhsExpression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [44] LhsExpression = ID LhsExpressionY; returns 'LhsExpressionY' although none is marked
			RETURN4,	// [45] LhsExpressionY = LBRACKET Expression RBRACKET LhsExpressionY; returns 'LhsExpressionY' although none is marked
			Action.NONE,  	// [46] LhsExpressionY = 
			Action.RETURN,	// [47] RhsExpression = ArithmeticExpression
			RETURN3,	// [48] RhsExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [49] ComparisonOperator = EQEQ
			Action.RETURN,	// [50] ComparisonOperator = NEQ
			Action.RETURN,	// [51] ComparisonOperator = LT
			Action.RETURN,	// [52] ComparisonOperator = LEQ
			Action.RETURN,	// [53] ComparisonOperator = GT
			Action.RETURN,	// [54] ComparisonOperator = GEQ
			new Action() {	// [55] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] AdditiveOperator = PLUS
			Action.RETURN,	// [58] AdditiveOperator = MINUS
			new Action() {	// [59] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [60] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [61] MultiplicativeOperator = TIMES
			Action.RETURN,	// [62] MultiplicativeOperator = DIV
			Action.RETURN,	// [63] MultiplicativeOperator = MOD
			RETURN2,	// [64] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [65] Factor = PrimaryExpression
			Action.RETURN,	// [66] PrimaryExpression = LhsExpression
			RETURN4,	// [67] PrimaryExpression = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [68] PrimaryExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [69] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [70] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [71] PrimaryExpression = TRUE
			Action.RETURN,	// [72] PrimaryExpression = FALSE
			RETURN3,	// [73] PrimaryExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			new Action() {	// [74] NonEmptyExpressionList = Expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [75] NonEmptyExpressionList = NonEmptyExpressionList COMMA Expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [76] ExpressionList = NonEmptyExpressionList
			Action.NONE	// [77] ExpressionList = 
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
