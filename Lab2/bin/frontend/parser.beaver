// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
// %goal Dummy;

Module = MODULE ID LCURLY Imports Declarations RCURLY
    ;
Imports = Import Imports
    |
    ;
Import = IMPORT ID SEMICOLON
    ;
Declarations = Declaration Declarations
    | 
    ;
Declaration = FunctionDeclaration
    | FieldDeclaration
    | TypeDeclaration
    ;
FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY 
    ;
FieldDeclaration = Accessibility TypeName ID SEMICOLON
    ;
TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON 
    ;
Accessibility = PUBLIC
	|
	;
TypeName = PrimitiveType
    | ArrayType
    | ID
    ;
PrimitiveType = VOID
	| BOOLEAN
	| INT
	;

ArrayType = PrimitiveType LBRACKET RBRACKET  
    | ArrayType LBRACKET RBRACKET
    | ID LBRACKET RBRACKET  
    ;

// Must separate, otherwise we will have problem with COMMA
// Prefer left recursion in case of comma in follow.
NonEmptyParameterList = NonEmptyParameterList COMMA Parameter
	| Parameter
	;
ParameterList = NonEmptyParameterList
	|
	;
Parameter = TypeName ID
	;
StatementList = Statement StatementList
    |
    ;
Statement = TypeName ID SEMICOLON  
    | LCURLY StatementList RCURLY  
    | IfStatement
    | WHILE LPAREN Expression RPAREN Statement 
    | BREAK SEMICOLON 
    | ReturnStatement 
    | Expression SEMICOLON 
    ;
IfStatement = IF LPAREN Expression RPAREN Statement 
    | IF LPAREN Expression RPAREN Statement ELSE Statement // shift-reduce conflict
    ;

ReturnStatement = RETURN Expression SEMICOLON 
    | RETURN SEMICOLON 
    ;
Expression = Assignment 
    | RhsExpression 
    ;
Assignment = LhsExpression EQL Expression
    ;

LhsExpression = ID LhsExpressionY
    ;
LhsExpressionY = LBRACKET Expression RBRACKET LhsExpressionY 
    |
    ;
RhsExpression = ArithmeticExpression 
    | ArithmeticExpression ComparisonOperator ArithmeticExpression 
    ;
ComparisonOperator = EQEQ
    | NEQ
    | LT
    | LEQ
    | GT
    | GEQ 
    ;

ArithmeticExpression = ArithmeticExpression AdditiveOperator Term  // Left recursion 
    | Term
    ;
AdditiveOperator = PLUS
    | MINUS
    ;

Term = Term MultiplicativeOperator Factor // left recursion 
    | Factor
    ;
MultiplicativeOperator = TIMES
    | DIV
    | MOD 
    ;
Factor = MINUS Factor
    | PrimaryExpression 
    ;
PrimaryExpression = LhsExpression 
    | ID LPAREN ExpressionList RPAREN  
    | LBRACKET NonEmptyExpressionList RBRACKET 
    | STRING_LITERAL 
    | INT_LITERAL
    | TRUE
    | FALSE
    | LPAREN Expression RPAREN  
    ;

NonEmptyExpressionList = Expression
    | NonEmptyExpressionList COMMA Expression  
    ;

ExpressionList = NonEmptyExpressionList
    | 
    ; 
/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. 
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;*/	  